import xlwings as xw
import pandas as pd
import tkinter as tk
from tkinter import Toplevel, Label, OptionMenu, Button, StringVar
from tkinter.filedialog import askopenfilename, asksaveasfilename

def select_file(root, title, file_types):
    return askopenfilename(title=title, filetypes=file_types, parent=root)

def select_from_dropdown(root, options, title, prompt):
    result = {'selection': None}

    def selection_made():
        result['selection'] = variable.get()
        top.destroy()

    top = Toplevel(root)
    top.title(title)
    Label(top, text=prompt).pack(pady=10)

    variable = StringVar(top)
    variable.set(options[0])  # default value

    dropdown = OptionMenu(top, variable, *options)
    dropdown.pack()

    Button(top, text="OK", command=selection_made).pack(pady=10)

    top.grab_set()  # Make the window modal
    top.wait_window()  # Wait for the window to close before returning
    return result['selection']

def main():
    root = tk.Tk()
    root.withdraw()

    template_path = select_file(root, "Select Template Workbook", [("Excel files", "*.xlsm")])
    if not template_path:
        print("No template workbook selected. Exiting.")
        return

    template_wb = xw.Book(template_path)
    sheet_names = [sheet.name for sheet in template_wb.sheets]
    
    target_sheets = []
    data_paths = []

    for i in range(1, 4):
        target_sheet_name = select_from_dropdown(root, sheet_names, "Sheet Selection", f"Select target sheet for Data Workbook {i}:")
        if target_sheet_name:
            target_sheets.append(target_sheet_name)
            data_path = select_file(root, f"Select Data Workbook {i}", [("Excel/CSV files", "*.xlsx;*.xlsm;*.csv")])
            if data_path:
                data_paths.append(data_path)

    for target_sheet_name, data_path in zip(target_sheets, data_paths):
        
    # Process each data workbook
    for target_sheet_name, data_path in zip(target_sheets, data_paths):
        process_data_workbook(data_path, target_sheet_name, template_wb)

    # Macro selection and execution
    macro_names = [macro.name for macro in template_wb.api.VBProject.VBComponents if macro.Type == 1] # Filter for macros
    selected_macro = select_from_dropdown(macro_names, "Macro Selection", "Select a macro to run:")
    if selected_macro:
        template_wb.macro(selected_macro)()

    save_path = asksaveasfilename(title="Save Modified Workbook As", defaultextension=".xlsm", filetypes=[("Excel files", "*.xlsm")])
    if save_path:
        template_wb.save(save_path)

    root.destroy()

if __name__ == "__main__":
    main()
